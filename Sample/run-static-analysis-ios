#!/usr/bin/env bash
#
# Copyright (c) Safetrust, Inc. - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential
#
# FILE NAME:
#   run-static-analysis-ios
#

set -o errexit;
set -o pipefail;

###############################################################################
# SUPPORT FUNCTIONS
###############################################################################

function log() {
    printf '%s\n' "$(date +'%Y-%m-%d %H:%M:%S'): ${1}";
};

function go_to_folder() {
    log ">>>>>>>>>> go_to_folder #path: ${1}";

    log "Go to folder: '${1}' - begin.";
    cd ${1};
    log "Go to folder: '${1}' - done.";

    log "<<<<<<<<<< go_to_folder";
};

function clean_up() {
    log ">>>>>>>>>> clean_up #path: '${1}'";

    log "removing: '${1}' - begin.";
    rm -rf ${1};
    log "removing: '${1}' - done.";

    log "<<<<<<<<<< clean_up";
};

function get_absolute_path() {
    local current_path=$(pwd);
    local relative_target_path=${1};
    local absolute_target_path;

    cd "${relative_target_path}" && \
    absolute_target_path=$(pwd) && \
    cd "${current_path}" && \
    echo "${absolute_target_path}";
};

function is_command_existed() {
   echo $(command -v "${1}");
};

###############################################################################
# PREPARATION
###############################################################################

current_path="$(pwd)";
arguments=();
sonar_scanner_path="";
project_version="1.0.101";
sonar_host="";
sonar_key="";

for i in "$@"; do
    case $1 in
        -p|--path) current_path="$2" ;;
        -s|--sonarscanner) sonar_scanner_path="$2" ;;
        -h|--sonarhost) sonar_host="$2" ;;
        -k|--sonarkey) sonar_key="$2" ;;
        -v|--projectversion) project_version="$2" ;;
        --) shift; arguments+=("$@"); break ;;
        *) arguments+=("$1"); ;;
    esac
    shift
done

absolute_current_path=$(get_absolute_path "${current_path}");

###############################################################################
# BUSINESS FUNCTIONS
###############################################################################

function clean_up_old_report() {
    log ">>>>>>>>>> clean_up_old_report #current-path: '${1}'";

    clean_up "${1}/compile_commands.json";
    clean_up "${1}/sonar-reports";
    clean_up "${1}/.scannerwork";

    log "<<<<<<<<<< clean_up_old_report";
}

function prepare_project_property() {
    # $3 is sonar key
    log ">>>>>>>>>> prepare_project_property #current-path: '${1}' \
                                             #sonar-host: '${2}' \
                                             #project_version: '${4}'";

    local property_name="${1}/sonar-project.properties";

    clean_up "${property_name}";
    log "creating file '${property_name}' - Begin.";
    cat <<EOF > "${property_name}"
# sonar-project.properties
sonar.host.url=${2}
sonar.login=${3}

# must be unique in a given SonarQube instance
sonar.projectKey=com.safetrust.wallet.sdk.native.iOS
sonar.projectName=com.safetrust.wallet.sdk.native.iOS
sonar.projectVersion=${4}

# Project description
sonar.projectDescription=SDK Sample iOS App

# Path to source directories
sonar.sources=./

# Comment if you have a project with mixed ObjC / Swift
sonar.language=swift

# Path to test directories (comment if no test)
# sonar.tests=SampleTests
# Destination Simulator to run surefire
# As string expected in destination argument of xcodebuild command
# Example = sonar.swift.simulator=platform=iOS Simulator,name=iPhone 6,OS=9.2
sonar.swift.simulator=platform=iOS Simulator,name=iPhone 8,OS=12.2

# Xcode project configuration (.xcodeproj)
# and use the later to specify which project(s) to include in the analysis (comma separated list)
# Specify either xcodeproj or xcodeproj + xcworkspace
sonar.swift.project=Sample.xcodeproj
sonar.swift.workspace=../SafetrustWDK.xcworkspace

# Specify your appname.
# This will be something like "myApp"
# Use when basename is different from targeted scheme.
# Or when slather fails with 'No product binary found'
# sonar.swift.appName=myApp
# Scheme to build your application
sonar.swift.appScheme=Sample
# Configuration to use for your scheme. if you do not specify that the default will be Debug
sonar.swift.appConfiguration=Debug
# Encoding of the source code. Default is default system encoding
sonar.sourceEncoding=UTF-8
# Paths to exclude from coverage report (surefire, 3rd party libraries etc.)
# sonar.swift.excludedPathsFromCoverage=pattern1,pattern2
sonar.swift.excludedPathsFromCoverage=.*Tests.*
#sonar.test.inclusions=**/*Test*/**
#sonar.test.inclusions=*.swift
#sonar.exclusions=**/*.xml,Pods/**/*,Reports/**/*
sonar.exclusions=Pods/**/*
EOF
    log "creating file '${property_name}' - End.";

    log "<<<<<<<<<< prepare_project_property";
};

function brew_install() {
    log ">>>>>>>>>> brew_install #current-path: '${1}' #command: '${2}'";

    local return_code=0;
    local install_command="${2}";
    local command_existed_result=$(is_command_existed "${install_command}");

    [[ "${command_existed_result}" ]] && log "${install_command} is existed, ignore installing" && return_code=1;
    [[ ! "${command_existed_result}" ]] && \
        log "${install_command} is not existed, installing." && \
        brew install ${install_command} && \
        log "${install_command} is installed.";

    log "<<<<<<<<<< brew_install";
    return ${return_code};
};

function pip_install() {
    log ">>>>>>>>>> pip_install #current-path: '${1}' #command: '${2}'";

    local return_code=0;
    local install_command="${2}";
    local command_existed_result=$(is_command_existed "${install_command}");

    [[ "${command_existed_result}" ]] && log "${install_command} is existed, ignore installing" && return_code=1;
    [[ ! "${command_existed_result}" ]] && \
        log "${install_command} is not existed, installing." && \
        pip install --user ${install_command} && \
        log "${install_command} is installed.";

    log "<<<<<<<<<< pip_install";
    return ${return_code};
};

function verify_sonar_native_ios() {
    log ">>>>>>>>>> verify_sonar_native_ios #current-path: '${1}'";

    ${1}/run-sonar-swift.sh -nounittests -nolizard;

    log "<<<<<<<<<< verify_sonar_native_ios";
};

###############################################################################
# MAIN FUNCTION
###############################################################################

function main() {
    # #sonar-login-key: ${4}
    log ">>>>>>>>>>>>>>>>>>>> run-static-analysis-ios main #current-path: '${1}' \
                                                           #sonar-scanner-path: '${2}' \
                                                           #sonar-host: '${3}' \
                                                           #project-version: '${5}'";
    local result_code=0;
    local current_path="${1}";
    local sonar_scanner_path=$(eval "echo ${2}");
    local sonar_host="${3}";
    local sonar_key="${4}";
    local project_version="${5}";

    go_to_folder "${current_path}";

    clean_up_old_report "${current_path}";
    prepare_project_property "${current_path}" "${sonar_host}" "${sonar_key}" "${project_version}";

    brew_install "${current_path}" "sonar-scanner";
    brew_install "${current_path}" "swiftlint";
    brew_install "${current_path}" "tailor";
    brew_install "${current_path}" "oclint";
    pip_install "${current_path}" "lizard";

    verify_sonar_native_ios "${sonar_scanner_path}";

    log "<<<<<<<<<<<<<<<<<<<< run-static-analysis-sdk main";
    exit ${result_code};
};

###############################################################################
# EXECUTION
###############################################################################

main "${absolute_current_path}" "${sonar_scanner_path}" "${sonar_host}" "${sonar_key}" "${project_version}";

# EOF
